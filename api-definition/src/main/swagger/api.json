{
  "swagger": "2.0",
  "info": {
    "title": "Person API",
    "description": "API REST for the Person resource",
    "version": "1.0.0-SNAPSHOT"
  },
  "host": "dev.coatli.net",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json",
    "text/plain"
  ],
  "paths": {
    "/persons/": {
      "parameters": [
        {
          "$ref": "#/parameters/traceability"
        }
      ],
      "post": {
        "tags": [
          "Persons"
        ],
        "description": "Create a resource Person",
        "parameters": [
          {
            "name": "person",
            "description": "A resource Person",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Person"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Resource Person created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The URI for the new resource Person"
              }
            }
          },
          "400": {
            "description": "Request headers or body malformed or empty"
          },
          "406": {
            "description": "The request have invalid content type"
          },
          "409": {
            "description": "Resource Person duplicated"
          },
          "422": {
            "description": "Request headers or body with invalid values"
          },
          "500": {
            "description": "Service error"
          }
        }
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "description": "Search resources Person",
        "parameters": [
          {
            "name": "X-Page",
            "description": "Page number",
            "in": "header",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "X-Size",
            "description": "Page size",
            "in": "header",
            "type": "integer",
            "format": "int32",
            "required": true
          },
          {
            "name": "age",
            "in": "query",
            "description": "Age filter for search",
            "type": "integer",
            "format": "int32",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful search",
            "headers": {
              "X-Size": {
                "type": "integer",
                "description": "Size of the list"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "400": {
            "description": "Request headers or query params malformed or empty"
          },
          "406": {
            "description": "The request have invalid content type"
          },
          "422": {
            "description": "Request headers or query params with invalid values"
          },
          "500": {
            "description": "Service error"
          }
        }
      }
    },
    "/persons/{key}": {
      "parameters": [
        {
          "$ref": "#/parameters/traceability"
        },
        {
          "name": "key",
          "description": "Person resource identifier",
          "in": "path",
          "type": "string",
          "format": "uuid",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Persons"
        ],
        "description": "Get a resource Person with identifier key",
        "responses": {
          "200": {
            "description": "Resource Person found",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "400": {
            "description": "Request headers or path params malformed or empty"
          },
          "404": {
            "description": "Resource Person not found"
          },
          "406": {
            "description": "The request have invalid content type"
          },
          "409": {
            "description": "Resource Person duplicated"
          },
          "422": {
            "description": "Request headers or path params with invalid values"
          },
          "500": {
            "description": "Service error"
          }
        }
      },
      "put": {
        "tags": [
          "Persons"
        ],
        "description": "Update a resource Person",
        "parameters": [
          {
            "name": "person",
            "description": "A resource Person",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Person"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Resource Person updated"
          },
          "400": {
            "description": "Request headers or path params malformed or empty"
          },
          "404": {
            "description": "Resource Person not found"
          },
          "406": {
            "description": "The request have invalid content type"
          },
          "422": {
            "description": "Request headers or path params with invalid values"
          },
          "500": {
            "description": "Service error"
          }
        }
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "description": "Remove a resource Person",
        "responses": {
          "204": {
            "description": "Resource Person deleted"
          },
          "400": {
            "description": "Request headers or path params malformed or empty"
          },
          "404": {
            "description": "Resource Person not found"
          },
          "406": {
            "description": "The request have invalid content type"
          },
          "422": {
            "description": "Request headers or path params with invalid values"
          },
          "500": {
            "description": "Service error"
          }
        }
      }
    }
  },
  "parameters": {
    "traceability": {
      "name": "X-Traceability-ID",
      "description": "UUID for the traceability of the client request",
      "in": "header",
      "required": true,
      "type": "string"
    }
  },
  "definitions": {
    "Person": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426655440000"
        },
        "name": {
          "type": "string",
          "example": "Alejo Carpentier"
        },
        "birthday": {
          "type": "string",
          "format": "date",
          "example": "31/12/2099"
        },
        "age": {
          "type": "integer",
          "format": "int32",
          "example": 45
        }
      }
    }
  }
}